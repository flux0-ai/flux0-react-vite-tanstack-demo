/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Agents
         * @description Retrieves a list of all agents in the system.
         *
         *     Returns an empty list if no agents exist.
         *     Agents are returned in no guaranteed order.
         */
        get: operations["list_agents"];
        put?: never;
        /**
         * Create Agent
         * @description Creates a new agent with the specified parameters.
         */
        post: operations["create_agent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents/{agent_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Agent
         * @description Retrieves details of a specific agent by ID.
         */
        get: operations["retrieve_agent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Sessions
         * @description Retrieve all sessions that match the given filters.
         *
         *     Filters can be applied using agent_id. If no filters are specified, all sessions will be returned.
         */
        get: operations["list_sessions"];
        put?: never;
        /**
         * Create a new session
         * @description Create a new session between a user and an agent.
         *
         *     The session will be associated with the provided agent and optionally with a user.
         *     If no user is provided, a guest user will be created.
         */
        post: operations["create_session"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Session
         * @description Retrieve details of a session by its unique identifier
         */
        get: operations["retrieve_session"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sessions/{session_id}/events/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create and stream session events
         * @description Creates a new event in the specified session and streams upcoming events.
         */
        post: operations["create_session_event"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sessions/{session_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Events
         * @description List events for a session with optional filtering
         *
         *     Retrieves events that occurred within a session, optionally filtering by source, correlation ID, and types.
         */
        get: operations["list_session_events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AgentCreationParams
         * @example {
         *       "description": "An agent that checks the weather",
         *       "name": "Drizzle",
         *       "type": "weather"
         *     }
         */
        AgentCreationParamsDTO: {
            /**
             * Name
             * @description The display name of the agent, mainly for representation purposes
             * @example Drizzle
             * @example Smarty
             */
            name: string;
            /**
             * Type
             * @description The type of the agent
             * @example weather
             */
            type: string;
            /** Description */
            description?: string | null;
        };
        /**
         * Agent
         * @example {
         *       "creation_utc": "2025-01-21T23:44:48",
         *       "description": "An agent that checks the weather",
         *       "id": "vUfk4PgjTm",
         *       "name": "Drizzle",
         *       "type": "weather"
         *     }
         */
        AgentDTO: {
            /**
             * Id
             * @description Unique identifier for the agent
             * @example vUfk4PgjTm
             */
            id: string;
            /**
             * Name
             * @description The display name of the agent, mainly for representation purposes
             * @example Drizzle
             * @example Smarty
             */
            name: string;
            /**
             * Type
             * @description The type of the agent
             * @example weather
             */
            type: string;
            /** Description */
            description?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description When the agent was created
             * @example 2025-01-21T23:44:48
             */
            created_at: string;
        };
        /**
         * Agents
         * @example {
         *       "data": [
         *         {
         *           "creation_utc": "2025-01-21T23:44:48",
         *           "description": "An agent that checks the weather",
         *           "id": "vUfk4PgjTm",
         *           "name": "Drizzle",
         *           "type": "weather"
         *         }
         *       ]
         *     }
         */
        AgentsDTO: {
            /** Data */
            data: components["schemas"]["AgentDTO"][];
        };
        /**
         * ChunkEvent
         * @example {
         *       "correlation_id": "RID(lyH-sVmwJO)::Y8oBzYT4CQ",
         *       "event_id": "o5kf8vKzI5",
         *       "metadata": {
         *         "agent_id": "vUfk4PgjTm",
         *         "agent_name": "Drizzle"
         *       },
         *       "patches": [
         *         {
         *           "op": "add",
         *           "path": "/-",
         *           "value": " currently"
         *         }
         *       ],
         *       "seq": 0,
         *       "timestamp": 1737495888
         *     }
         */
        ChunkEventDTO: {
            /**
             * Event Id
             * @description Unique identifier for the event
             * @example o5kf8vKzI5
             */
            event_id: string;
            /**
             * Correlation Id
             * @description Identifier linking related events together
             * @example RID(lyH-sVmwJO)::Y8oBzYT4CQ
             */
            correlation_id: string;
            /**
             * Seq
             * @description Sequential position of the chunk
             * @example 0
             * @example 1
             * @example 2
             */
            seq: number;
            /** Patches */
            patches: components["schemas"]["JsonPatchOperationDTO"][];
            /** Metadata */
            metadata: {
                [key: string]: unknown;
            };
            /** Timestamp */
            timestamp?: number;
        };
        /** ChunkEventStream */
        ChunkEventStream: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            event: "chunk";
            data: components["schemas"]["ChunkEventDTO"];
        };
        /**
         * ConsumptionOffsets
         * @description Tracks the state of message consumption.
         * @example {
         *       "client": 37
         *     }
         */
        ConsumptionOffsetsDTO: {
            /** Client */
            client?: number | null;
        };
        /**
         * ContentPart
         * @example {
         *       "text": "What's the weather in SF?",
         *       "type": "text"
         *     }
         */
        ContentPartDTO: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "content";
            /**
             * Content
             * @description Any valid JSON
             * @example "foo"
             * @example [1, 2]
             * @example {"data"="bar", "data2"="baz"}
             */
            content: unknown;
        };
        /** ControlOptions */
        ControlOptions: {
            /**
             * Mode
             * @enum {string}
             */
            mode: "auto" | "manual";
        };
        /**
         * EmittedEvent
         * @example {
         *       "correlation_id": "RID(fxjwGfAIYV)::u9ysV1pbcd",
         *       "data": {
         *         "acknowledged_offset": 0,
         *         "data": {},
         *         "status": "processing",
         *         "type": "status"
         *       },
         *       "id": "F2srsmTGrN",
         *       "kind": "status",
         *       "source": "ai_agent"
         *     }
         * @example {
         *       "correlation_id": "RID(fxjwGfAIYV)::u9ysV1pbcd",
         *       "event_id": "3383a5cc-3fa5-447d-8a83-85089fabf00f",
         *       "metadata": {},
         *       "patches": [
         *         {
         *           "op": "add",
         *           "path": "/tool_calls",
         *           "value": []
         *         },
         *         {
         *           "op": "replace",
         *           "path": "/tool_calls/0/tool_name",
         *           "value": "search"
         *         }
         *       ],
         *       "seq": 0,
         *       "timestamp": 1739376296.059654
         *     }
         * @example {
         *       "correlation_id": "RID(fxjwGfAIYV)::u9ysV1pbcd",
         *       "event_id": "e936e0ba-1bfe-4f59-a061-2853c5517ade",
         *       "metadata": {},
         *       "patches": [
         *         {
         *           "op": "add",
         *           "path": "/content/-",
         *           "value": "Hi"
         *         }
         *       ],
         *       "seq": 0,
         *       "timestamp": 1739376296.060092
         *     }
         */
        EmittedEventDTO: {
            /**
             * Id
             * @description Unique identifier for the event
             * @example o5kf8vKzI5
             */
            id: string;
            /**
             * Correlation Id
             * @description Identifier linking related events together
             * @example RID(lyH-sVmwJO)::Y8oBzYT4CQ
             */
            correlation_id: string;
            type: components["schemas"]["EventTypeDTO"];
            source: components["schemas"]["EventSourceDTO"];
            /** Data */
            data: components["schemas"]["MessageEventDataDTO"] | components["schemas"]["StatusEventDataDTO"] | components["schemas"]["ToolEventDataDTO"];
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /** EmittedEventStream */
        EmittedEventStream: {
            /**
             * Id
             * @description Unique identifier for the event
             * @example o5kf8vKzI5
             */
            id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            event: "status";
            data: components["schemas"]["EmittedEventDTO"];
        };
        /**
         * EventCreationParams
         * @description Parameters for creating a new event within a session.
         * @example {
         *       "content": "What's the weather in SF?",
         *       "kind": "message",
         *       "source": "user"
         *     }
         */
        EventCreationParamsDTO: {
            type: components["schemas"]["EventTypeDTO"];
            source: components["schemas"]["EventSourceDTO"];
            /** Content */
            content?: string | null;
        };
        /**
         * Event
         * @example {
         *       "correlation_id": "RID(lyH-sVmwJO)::Y8oBzYT4CQ",
         *       "created_at": "2025-01-29T09:27:41Z",
         *       "data": {
         *         "participant": {
         *           "display_name": "John Doe",
         *           "id": "i5f9zYvtJ4"
         *         },
         *         "parts": [
         *           {
         *             "content": "The weather in San Francisco is currently 60 degrees and foggy.",
         *             "type": "content"
         *           }
         *         ],
         *         "type": "message"
         *       },
         *       "id": "o5kf8vKzI5",
         *       "metadata": {
         *         "agent_id": "vUfk4PgjTm",
         *         "agent_name": "Drizzle"
         *       },
         *       "offset": 0,
         *       "source": "user",
         *       "type": "message"
         *     }
         */
        EventDTO: {
            /**
             * Id
             * @description Unique identifier for the event
             * @example o5kf8vKzI5
             */
            id: string;
            /**
             * Correlation Id
             * @description Identifier linking related events together
             * @example RID(lyH-sVmwJO)::Y8oBzYT4CQ
             */
            correlation_id: string;
            type: components["schemas"]["EventTypeDTO"];
            source: components["schemas"]["EventSourceDTO"];
            /**
             * Offset
             * @description Sequential position of the event in the session
             * @example 0
             * @example 1
             * @example 2
             */
            offset: number;
            /** Data */
            data: components["schemas"]["MessageEventDataDTO"] | components["schemas"]["StatusEventDataDTO"] | components["schemas"]["ToolEventDataDTO"];
            /** Deleted */
            deleted: boolean;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
            /**
             * Created At
             * Format: date-time
             * @description When the event was created
             * @example 2025-01-29T09:27:41
             */
            created_at: string;
        };
        /**
         * EventSource
         * @description Source of the event within a session.
         *
         *     Identifies who or what generated the event.
         * @enum {string}
         */
        EventSourceDTO: "user" | "ai_agent" | "system";
        /**
         * EventType
         * @description Type of event that occurred within a session.
         *
         *     Represents different types of interactions that can occur within a conversation.
         * @enum {string}
         */
        EventTypeDTO: "message" | "tool" | "status" | "custom";
        /**
         * Events
         * @example {
         *       "data": [
         *         {
         *           "correlation_id": "RID(lyH-sVmwJO)::Y8oBzYT4CQ",
         *           "created_at": "2025-01-29T09:27:41Z",
         *           "data": {
         *             "participant": {
         *               "display_name": "John Doe",
         *               "id": "i5f9zYvtJ4"
         *             },
         *             "parts": [
         *               {
         *                 "content": "The weather in San Francisco is currently 60 degrees and foggy.",
         *                 "type": "content"
         *               }
         *             ],
         *             "type": "message"
         *           },
         *           "id": "o5kf8vKzI5",
         *           "metadata": {
         *             "agent_id": "vUfk4PgjTm",
         *             "agent_name": "Drizzle"
         *           },
         *           "offset": 0,
         *           "source": "user",
         *           "type": "message"
         *         }
         *       ]
         *     }
         */
        EventsDTO: {
            /** Data */
            data: components["schemas"]["EventDTO"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * JsonPatchOperation
         * @example {
         *       "op": "add",
         *       "path": "/a/b",
         *       "value": 1
         *     }
         */
        JsonPatchOperationDTO: {
            /**
             * Op
             * @description The operation to perform
             * @example add
             * @example replace
             * @enum {string}
             */
            op: "add" | "replace";
            /**
             * Path
             * @description The path to the target
             * @example /-
             * @example /foo
             */
            path: string;
            /**
             * Value
             * @description Any valid JSON
             * @example "foo"
             * @example [1, 2]
             * @example {"data"="bar", "data2"="baz"}
             */
            value: unknown;
        };
        /**
         * MessageEventData
         * @example {
         *       "participant": {
         *         "display_name": "John Doe",
         *         "id": "i5f9zYvtJ4"
         *       },
         *       "parts": [
         *         {
         *           "text": "What's the weather in SF?",
         *           "type": "text"
         *         }
         *       ]
         *     }
         */
        MessageEventDataDTO: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "message";
            /** Tags */
            tags?: string[] | null;
            /** Flagged */
            flagged?: boolean | null;
            /** Parts */
            parts: (components["schemas"]["ContentPartDTO"] | components["schemas"]["ReasoningPartDTO"] | components["schemas"]["ToolPartDTO"])[];
            /** Participant */
            participant?: {
                [key: string]: string;
            } | null;
        };
        /**
         * ReasoningPart
         * @example {
         *       "reasoning": "The user has requested me to check the weather in SF, I should probably call the weather API for San Francisco.",
         *       "type": "reasoning"
         *     }
         */
        ReasoningPartDTO: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "reasoning";
            /**
             * Reasoning
             * @description Any valid JSON
             * @example "foo"
             * @example [1, 2]
             * @example {"data"="bar", "data2"="baz"}
             */
            reasoning: unknown;
        };
        /**
         * SessionCreationParams
         * @example {
         *       "agent_id": "vUfk4PgjTm",
         *       "title": "What's the weather in SF?"
         *     }
         */
        SessionCreationParamsDTO: {
            /**
             * Agent Id
             * @description Unique identifier of the agent associated with the session.
             * @example vUfk4PgjTm
             */
            agent_id: string;
            /** Id */
            id?: string | null;
            /** Title */
            title?: string | null;
        };
        /**
         * Session
         * @example {
         *       "agent_id": "vUfk4PgjTm",
         *       "created_at": "2025-01-29T09:27:41Z",
         *       "id": "zv3h4j5Fjv",
         *       "title": "The weather in SF",
         *       "user_id": "v9pg5Zv3h4"
         *     }
         */
        SessionDTO: {
            /**
             * Id
             * @description Unique identifier of the session
             * @example zv3h4j5Fjv
             */
            id: string;
            /**
             * Agent Id
             * @description Unique identifier of the agent associated with the session.
             * @example vUfk4PgjTm
             */
            agent_id: string;
            /**
             * User Id
             * @description Unique identifier of the user associated with the session.
             * @example v9pg5Zv3h4
             */
            user_id: string;
            /** Title */
            title?: string | null;
            consumption_offsets: components["schemas"]["ConsumptionOffsetsDTO"];
            /**
             * Created At
             * Format: date-time
             * @description When the session was created
             * @example 2025-01-25T22:41:41
             */
            created_at: string;
        };
        /** SessionStream */
        SessionStream: components["schemas"]["ChunkEventStream"] | components["schemas"]["EmittedEventStream"];
        /**
         * Sessions
         * @example {
         *       "data": [
         *         {
         *           "agent_id": "vUfk4PgjTm",
         *           "created_at": "2025-01-29T09:27:41Z",
         *           "id": "zv3h4j5Fjv",
         *           "title": "The weather in SF",
         *           "user_id": "v9pg5Zv3h4"
         *         }
         *       ]
         *     }
         */
        SessionsDTO: {
            /** Data */
            data: components["schemas"]["SessionDTO"][];
        };
        /**
         * StatusEventData
         * @example {
         *       "acknowledged_offset": 4,
         *       "data": {
         *         "exception": "Traceback (most recent call last):\n..."
         *       },
         *       "status": "error"
         *     }
         */
        StatusEventDataDTO: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "status";
            status: components["schemas"]["StatusEventDataStatusField"];
            /** Acknowledged Offset */
            acknowledged_offset?: number | null;
            /** Data */
            data?: unknown | null;
        };
        /**
         * StatusEventDataStatusField
         * @description Status of the event.
         * @enum {string}
         */
        StatusEventDataStatusField: "acknowledged" | "cancelled" | "processing" | "ready" | "typing" | "error" | "completed";
        /**
         * ToolCall
         * @example {
         *       "args": {
         *         "query": "San Francisco weather"
         *       },
         *       "result": "It's 60 degrees and foggy.",
         *       "tool_call_id": "call01",
         *       "tool_name": "search"
         *     }
         */
        ToolCallDTO: {
            /** Tool Call Id */
            tool_call_id: string;
            /** Tool Name */
            tool_name: string;
            /** Args */
            args: {
                [key: string]: unknown;
            };
            result?: components["schemas"]["ToolResultDTO"] | null;
            /** Error */
            error?: string | null;
        };
        /**
         * ToolEventData
         * @example {
         *       "tool_calls": [
         *         {
         *           "args": {
         *             "query": "San Francisco weather"
         *           },
         *           "result": "It's 60 degrees and foggy.",
         *           "tool_call_id": "call01",
         *           "tool_name": "search"
         *         }
         *       ]
         *     }
         */
        ToolEventDataDTO: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tool_call_result";
            /** Tool Calls */
            tool_calls: components["schemas"]["ToolCallDTO"][];
        };
        /**
         * ToolPart
         * @example {
         *       "args": {
         *         "query": "San Francisco weather"
         *       },
         *       "tool_call_id": "call01",
         *       "tool_name": "search",
         *       "type": "typing.Literal['tool_call']"
         *     }
         */
        ToolPartDTO: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tool_call";
            /** Tool Call Id */
            tool_call_id: string;
            /** Tool Name */
            tool_name: string;
            /**
             * Args
             * @description Any valid JSON
             * @example "foo"
             * @example [1, 2]
             * @example {"data"="bar", "data2"="baz"}
             */
            args: unknown;
        };
        /** ToolResult */
        ToolResultDTO: {
            /**
             * Data
             * @description Any valid JSON
             * @example "foo"
             * @example [1, 2]
             * @example {"data"="bar", "data2"="baz"}
             */
            data: unknown;
            /** Metadata */
            metadata: {
                [key: string]: unknown;
            };
            control: components["schemas"]["ControlOptions"];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_agents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all agents in the system */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": "vUfk4PgjTm",
                     *           "name": "Drizzle",
                     *           "type": "weather",
                     *           "description": "An agent that checks the weather",
                     *           "creation_utc": "2025-01-21T23:44:48"
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["AgentsDTO"];
                };
            };
        };
    };
    create_agent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentCreationParamsDTO"];
            };
        };
        responses: {
            /** @description Agent created successfully, Returns the created agent along with its generated ID. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "vUfk4PgjTm",
                     *       "name": "Drizzle",
                     *       "type": "weather",
                     *       "description": "An agent that checks the weather",
                     *       "creation_utc": "2025-01-21T23:44:48"
                     *     } */
                    "application/json": components["schemas"]["AgentDTO"];
                };
            };
            /** @description Validation error in request parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    retrieve_agent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier for the agent */
                agent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Agent details successfully retrieved. Returns the complete agent object. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "vUfk4PgjTm",
                     *       "name": "Drizzle",
                     *       "type": "weather",
                     *       "description": "An agent that checks the weather",
                     *       "creation_utc": "2025-01-21T23:44:48"
                     *     } */
                    "application/json": components["schemas"]["AgentDTO"];
                };
            };
            /** @description Agent not found. The specified `agent_id` does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_sessions: {
        parameters: {
            query?: {
                agent_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all matching sessions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": "zv3h4j5Fjv",
                     *           "agent_id": "vUfk4PgjTm",
                     *           "user_id": "v9pg5Zv3h4",
                     *           "title": "The weather in SF",
                     *           "created_at": "2025-01-29T09:27:41Z"
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["SessionsDTO"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_session: {
        parameters: {
            query?: {
                /** @description Indicates if the agent is permitted to send an initial greeting */
                allow_greeting?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionCreationParamsDTO"];
            };
        };
        responses: {
            /** @description Session created successfully, Returns the created session along with its generated ID. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "zv3h4j5Fjv",
                     *       "agent_id": "vUfk4PgjTm",
                     *       "user_id": "v9pg5Zv3h4",
                     *       "title": "The weather in SF",
                     *       "created_at": "2025-01-29T09:27:41Z"
                     *     } */
                    "application/json": components["schemas"]["SessionDTO"];
                };
            };
            /** @description Invalid request parameters, such as missing agent ID or invalid session ID format. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error in request parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    retrieve_session: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the session */
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session details retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "zv3h4j5Fjv",
                     *       "agent_id": "vUfk4PgjTm",
                     *       "user_id": "v9pg5Zv3h4",
                     *       "title": "The weather in SF",
                     *       "created_at": "2025-01-29T09:27:41Z"
                     *     } */
                    "application/json": components["schemas"]["SessionDTO"];
                };
            };
            /** @description Session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_session_event: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the session */
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventCreationParamsDTO"];
            };
        };
        responses: {
            /** @description Server-Sent Events (SSE) stream with structured event types */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": components["schemas"]["SessionStream"];
                };
            };
            /** @description Session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error in event parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_session_events: {
        parameters: {
            query?: {
                min_offset?: number | null;
                source?: components["schemas"]["EventSourceDTO"] | null;
                correlation_id?: string | null;
                types?: components["schemas"]["EventTypeDTO"][] | null;
            };
            header?: never;
            path: {
                /** @description Unique identifier of the session */
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of events matching the specified criteria */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": "o5kf8vKzI5",
                     *         "correlation_id": "RID(lyH-sVmwJO)::Y8oBzYT4CQ",
                     *         "source": "user",
                     *         "type": "message",
                     *         "offset": 0,
                     *         "data": {
                     *           "type": "message",
                     *           "parts": [
                     *             {
                     *               "type": "content",
                     *               "content": "The weather in San Francisco is currently 60 degrees and foggy."
                     *             }
                     *           ],
                     *           "participant": {
                     *             "id": "i5f9zYvtJ4",
                     *             "display_name": "John Doe"
                     *           }
                     *         },
                     *         "metadata": {
                     *           "agent_id": "vUfk4PgjTm",
                     *           "agent_name": "Drizzle"
                     *         },
                     *         "created_at": "2025-01-29T09:27:41Z"
                     *       }
                     *     ] */
                    "application/json": components["schemas"]["EventsDTO"];
                };
            };
            /** @description Session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error in request parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request timeout waiting for new events */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
